% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/occupancy.R, R/package.R
\docType{package}
\name{occupancy}
\alias{occupancy}
\alias{occupancy-package}
\title{fit occupancy-detection models}
\arguments{
\item{formula_occ}{model formula for occupancy component of the model. A two-sided
formula with the response variable on the left of the \code{~} operator and the
predictor variables on the right. Multiple predictor variables are separated by
\code{+} operators. Random effects are included with vertical bars, using the
notation \code{(1 | group)} to specify a random intercept for the variable
\code{group}. More complex random structures (e.g., random slopes) are not 
supported.}

\item{formula_detect}{model formula for detection component of the model. A one-sided
formula with predictor variables on the right, formatted as for \code{formula_occ}.}

\item{site_id}{the name of the column in \code{data} in which site
identifiers are recorded.}

\item{survey_id}{the name of the column in \code{data} in which survey
identifiers are recorded.}

\item{data}{a \code{data.frame} in long format containing data on all variables. Required
variables include the response (detection-nondetection data), site and survey identifiers
(see \code{site_id} and \code{survey_id}, above), and predictor variables. Column names
must match the names used in \code{formula_occ} and \code{formula_detect}.}

\item{jags_settings}{optional list of MCMC settings. Options are: 
- the total number of MCMC iterations (including burn-in): \code{n_iter}
- the number of MCMC iterations to discard as a burn-in: \code{n_burnin}
- the number of MCMC chains: \code{n_chains}
- thinning rate of MCMC samples: \code{n_thin}
- logical, should chains be run in parallel?: \code{parallel}
- JAGS modules to load: \code{modules}
- character vector of parameters to store: \code{params}
- seed used to initialise MCMC chains: \code{seed}
Any or all of these can be altered if needed.}
}
\value{
\code{occupancy_model} - a \code{list} object that can be analysed using
  functions described in \link[occupancy:methods]{occupancy::methods}.
}
\description{
occupancy is a function to fit occupancy-detection models in JAGS from
    within R. Models are specified with a formula interface and are supported by 
    methods to summarise, visualise, validate, and predict from fitted models.

occupancy lets you fit occupancy-detection models in JAGS without
  having to prepare JAGS code. Models are specified with a formula interface
  and can incorporate random effects. Models are supported by several methods
  to summarise, visualise, validate, and predict from fitted models.
}
\details{
This function fits an occupancy-detection model in JAGS from two formulas:
    \code{formula_occ} and \code{formula_detect}. Occupancy-detection models separate
    the two processes of being present at a site and being detect given presence at
    a site. This requires data from repeated visits (surveys) to sites.
    
    The occupancy component of the model (presence at a site) is defined at
    the site level. The detection component of the model (detections given presence)
    is defined at the survey level. The model assumes that associations between
    occupancy/detection and predictor variables are linear on a logit scale.
}
\examples{
\dontrun{

# simulate some data
n <- 10
nx_occ <- 3
nx_detect <- 2
ngroup_occ <- 3
ngroup_detect <- 4
x_occ <- matrix(rnorm(n * nx_occ), ncol = nx_occ)
z_occ <- sample(seq_len(ngroup_occ), size = n, replace = TRUE)
x_detect <- matrix(rnorm(n * nx_detect), ncol = nx_detect)
z_detect <- sample(seq_len(ngroup_detect), size = n, replace = TRUE)
beta_occ <- rnorm(nx_occ)
gamma_occ <- rnorm(ngroup_occ)
beta_detect <- rnorm(nx_detect)
gamma_detect <- rnorm(ngroup_detect)
y

# fit model

}
\dontrun{
# a simple occupancy-detection model for artificial data

# build and sample

# plot coefficients

# validate

}
}
